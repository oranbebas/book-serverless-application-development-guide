AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: An AWS Serverless Specification template describing your function.
Resources:
  postImages:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: postImages/
      Handler: post-images.lambda_handler
      Runtime: python3.6
      Description: ''
      MemorySize: 128
      Timeout: 15
      Role: arn:aws:iam::589310877371:role/lambda-dynamodb-access
      Environment:
        Variables:
          BUCKET_NAME: serverless-app-photos-20180327
          TABLE_NAME: photos
  updateImage:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: updateImage/
      Handler: update-image.lambda_handler
      Runtime: python3.6
      Description: ''
      MemorySize: 128
      Timeout: 15
      Role: arn:aws:iam::589310877371:role/lambda-dynamodb-access
      Environment:
        Variables:
          BUCKET_NAME: serverless-app-photos-20180327
          TABLE_NAME: photos
  getImages:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: getImages/
      Handler: get-images.lambda_handler
      Runtime: python3.6
      Description: ''
      MemorySize: 128
      Timeout: 15
      Role: arn:aws:iam::589310877371:role/lambda-dynamodb-access
      Environment:
        Variables:
          BUCKET_NAME: serverless-app-photos-20180327
          TABLE_NAME: photos
  getImageById:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: getImageById/
      Handler: get-image-by-id.lambda_handler
      Runtime: python3.6
      Description: ''
      MemorySize: 128
      Timeout: 15
      Role: arn:aws:iam::589310877371:role/lambda-dynamodb-access
      Environment:
        Variables:
          BUCKET_NAME: serverless-app-photos-20180327
          TABLE_NAME: photos
  deleteImageById:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: deleteImageById/
      Handler: delete-image-by-id.lambda_handler
      Runtime: python3.6
      Description: ''
      MemorySize: 128
      Timeout: 15
      Role: arn:aws:iam::589310877371:role/lambda-dynamodb-access
      Environment:
        Variables:
          BUCKET_NAME: serverless-app-photos-20180327
          TABLE_NAME: photos
  Api:
    Type: 'AWS::Serverless::Api'
    Properties:
      StageName: Prod
      DefinitionBody:
        swagger: "2.0"
        info:
          version: "1.0"
          title: "serverless-app-20180327"
        schemes:
        - "https"
        paths:
          /images:
            get:
              responses: {}
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:ap-northeast-1:lambda:path/2015-03-31/functions/${getImages.Arn}/invocations
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws_proxy"
            post:
              responses: {}
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:ap-northeast-1:lambda:path/2015-03-31/functions/${postImages.Arn}/invocations
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws_proxy"
            put:
              responses: {}
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:ap-northeast-1:lambda:path/2015-03-31/functions/${updateImage.Arn}/invocations
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws_proxy"
            options:
              consumes:
                - application/json
              produces:
                - application/json
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                  application/json: |
                    {
                      "statusCode" : 200
                    }
                responses:
                  "default":
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                      method.response.header.Access-Control-Allow-Methods : "'GET, POST, PUT, DELETE'"
                      method.response.header.Access-Control-Allow-Origin : "'*'"
                    responseTemplates:
                      application/json: |
                        {}
              responses:
                "200":
                  headers:
                    Access-Control-Allow-Headers:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Origin:
                      type: "string"
          /images/{id}:
            get:
              responses: {}
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:ap-northeast-1:lambda:path/2015-03-31/functions/${getImageById.Arn}/invocations
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws_proxy"
            delete:
              responses: {}
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:ap-northeast-1:lambda:path/2015-03-31/functions/${deleteImageById.Arn}/invocations
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws_proxy"
            options:
              consumes:
                - application/json
              produces:
                - application/json
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                  application/json: |
                    {
                      "statusCode" : 200
                    }
                responses:
                  "default":
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                      method.response.header.Access-Control-Allow-Methods : "'GET, POST, PUT, DELETE'"
                      method.response.header.Access-Control-Allow-Origin : "'*'"
                    responseTemplates:
                      application/json: |
                        {}
              responses:
                "200":
                  headers:
                    Access-Control-Allow-Headers:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Origin:
                      type: "string"
  getImagesPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref getImages
      Principal: apigateway.amazonaws.com
  postImagesPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref postImages
      Principal: apigateway.amazonaws.com
  updateImagePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref updateImage
      Principal: apigateway.amazonaws.com
  getImageByIdPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref getImageById
      Principal: apigateway.amazonaws.com
  deleteImageByIdPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref deleteImageById
      Principal: apigateway.amazonaws.com
